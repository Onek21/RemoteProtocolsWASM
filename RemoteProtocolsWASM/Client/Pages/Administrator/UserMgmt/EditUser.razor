@using RemoteProtocolsWASM.Shared.ViewModels.UserVm
@using RemoteProtocolsWASM.Shared.ViewModels.GroupVm
@using RemoteProtocolsWASM.Shared.ViewModels.CarVm
@using RemoteProtocolsWASM.Shared.ViewModels.XLViewModels
@using RemoteProtocolsWASM.Client.Application.Interfaces
@using RemoteProtocolsWASM.Client.Application.Interfaces.XLInterfaces
@inject IUserService UserService
@inject ICarService CarService
@inject IGroupService GroupService
@inject IWarehouseService WarehouseService
@inject DialogService DialogService
@inject NotificationService NotificationService

@page "/Pages/Administrator/UserMgmt/EditUser/{Id}"
<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Edytuj">
            <div class="content">
                <RadzenTemplateForm Data="@editUser" TItem="EditUserVm" Submit="@UpdateUser">
                    <DataAnnotationsValidator />
                    <div class="row">

                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Login:" Component="UserName" />
                        </div>

                        <div class="col-md-8">
                            <RadzenTextBox Name="UserName" @bind-Value="@editUser.UserName" ReadOnly />
                            <ValidationMessage For="@(() =>editUser.UserName)" />
                        </div>

                    </div>

                    <div class="row">

                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Email:" Component="Email" />
                        </div>

                        <div class="col-md-8">
                            <RadzenTextBox Name="Email" @bind-Value="@editUser.Email" />
                            <ValidationMessage For="@(() =>editUser.Email)" />
                        </div>

                    </div>
                    <div class="row">

                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Imię i Nazwisko:" Component="Name" />
                        </div>

                        <div class="col-md-8">
                            <RadzenTextBox Name="Name" @bind-Value="@editUser.Name" />
                            <ValidationMessage For="@(() =>editUser.Name)" />
                        </div>

                    </div>
                    <div class="row">

                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Magazyn:" Component="Warehouse" />
                        </div>

                        <div class="col-md-8">
                            <RadzenDropDown AllowClear="true" TValue="string" Name="Warehouse"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                            Data=@itecomWarehouses TextProperty="Name" ValueProperty="Name" @bind-Value="@editUser.Warehouse" />
                            <ValidationMessage For="@(() =>editUser.Warehouse)" />
                        </div>

                    </div>

                    <div class="row">

                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="MagazynDino:" Component="WarehouseDino" />
                        </div>

                        <div class="col-md-8">
                            <RadzenDropDown AllowClear="true" TValue="string" Name="WarehouseDino"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                            Data=@dinoWarehouses TextProperty="Name" ValueProperty="Name" @bind-Value="@editUser.WarehouseDino" />
                            <ValidationMessage For="@(() =>editUser.WarehouseDino)" />
                        </div>

                    </div>

                    <div class="row">

                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Samochód:" Component="CarId" />
                        </div>

                        <div class="col-md-8">
                            <RadzenDropDown AllowClear="true" TValue="int" Name="CarId"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                            Data=@cars TextProperty="RegistrationNumber" ValueProperty="CarId" @bind-Value="@editUser.CarId" />
                            <ValidationMessage For="@(() =>editUser.CarId)" />
                        </div>

                    </div>

                    <div class="row">

                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Grupa:" Component="GroupId" />
                        </div>

                        <div class="col-md-8">
                            <RadzenDropDown AllowClear="true" TValue="int" Name="GroupId"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                            Data=@groups TextProperty="Code" ValueProperty="GroupId" @bind-Value="@editUser.GroupId" />
                            <ValidationMessage For="@(() =>editUser.GroupId)" />
                        </div>

                    </div>

                    <div class="row">

                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Przełożony:" Component="ManagerId" />
                        </div>

                        <div class="col-md-8">
                            <RadzenDropDown AllowClear="true" TValue="string" Name="ManagerId"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                            Data=@managers TextProperty="Name" ValueProperty="Id" @bind-Value="@editUser.ManagerId" />
                            <ValidationMessage For="@(() =>editUser.ManagerId)" />
                        </div>

                    </div>

                    <div class="row">

                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Zablokowany:" Component="IsLockout" />
                        </div>

                        <div class="col-md-8">
                            <RadzenCheckBox Name="IsLockout" @bind-Value="@editUser.IsLockout" />
                        </div>

                    </div>


                    <div class="row justify-content-center">
                        <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                            <RadzenButton ButtonType="ButtonType.Submit" Text="Zapisz" Icon="save" />
                            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Zamknij" Icon="cancel" Click="@((args) => DialogService.Close(false))" style="display: inline-block; margin-left: 10px;" />
                        </div>
                    </div>

                </RadzenTemplateForm>
            </div>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Resetuj hasło">
            <div class="content">
                <RadzenTemplateForm Data="@resetPassword" TItem="ResetPasswordVm" Submit="@ResestPassword">
                    <DataAnnotationsValidator />
                    <div class="row">

                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Login:" Component="UserName" />
                        </div>

                        <div class="col-md-8">
                            <RadzenTextBox Name="UserName" @bind-Value="@resetPassword.UserName" ReadOnly />
                            <ValidationMessage For="@(() =>resetPassword.UserName)" />
                        </div>

                    </div>


                    <div class="row">

                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Hasło:" Component="Password" />
                        </div>

                        <div class="col-md-8">
                            <RadzenPassword Name="Password" @bind-Value="@resetPassword.Password" />
                            <ValidationMessage For="@(() =>resetPassword.Password)" />
                        </div>

                    </div>

                    <div class="row">

                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Potwierdź Hasło:" Component="ConfirmPassword" />
                        </div>

                        <div class="col-md-8">
                            <RadzenPassword Name="ConfirmPassword" @bind-Value="@resetPassword.ConfirmPassword" />
                            <ValidationMessage For="@(() =>resetPassword.ConfirmPassword)" />
                        </div>

                    </div>


                    <div class="row justify-content-center">
                        <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                            <RadzenButton ButtonType="ButtonType.Submit" Text="Zapisz" Icon="save" />
                            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Zamknij" Icon="cancel" Click="@((args) => DialogService.Close(false))" style="display: inline-block; margin-left: 10px;" />
                        </div>
                    </div>

                </RadzenTemplateForm>
            </div>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Nadaj role">
            <RadzenLabel Text="Nadaj role:" />
            <RadzenTemplateForm Data="@editUser" TItem="EditUserVm" Submit="@UpdateRoles">
                <RadzenCheckBoxList @bind-Value="@editUser.UserRoles" Orientation="Orientation.Vertical">
                    <Items>
                        @foreach (var roles in editUser.Roles)
                        {
                            <RadzenCheckBoxListItem Text="@roles.Name" Value="@roles.Name" TValue="string" />
                        }
                    </Items>
                </RadzenCheckBoxList>
                <div class="row justify-content-center">
                    <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Zapisz" Icon="save" />
                        <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Zamknij" Icon="cancel" Click="@((args) => DialogService.Close(false))" style="display: inline-block; margin-left: 10px;" />
                    </div>
                </div>
            </RadzenTemplateForm>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    [Parameter]
    public string id { get; set; }

    EditUserVm editUser = new EditUserVm();
    ResetPasswordVm resetPassword = new ResetPasswordVm();
    IEnumerable<UserListVm> managers;
    IEnumerable<CarListVm> cars;
    IEnumerable<GroupListVm> groups;
    IEnumerable<WarehouseListVm> itecomWarehouses;
    IEnumerable<WarehouseListVm> dinoWarehouses;

    protected override async Task OnInitializedAsync()
    {
        editUser = await UserService.GetUserById(id);
        resetPassword = await UserService.GetUserByIdToResetPassword(id);
        managers = await UserService.GetUsers();
        cars = await CarService.GetActiveCars();
        groups = await GroupService.GetActiveGroups();
        itecomWarehouses = await WarehouseService.GetItecomWarehouses();
        dinoWarehouses = await WarehouseService.GetDinoWarehouses();
    }

    private async Task UpdateUser()
    {
        await UserService.EditUser(editUser);
        NotificationService.Notify(new Radzen.NotificationMessage() { Style = "position: absolute; left: -1000px;", Severity = NotificationSeverity.Success, Summary = "Zaktualizowano użytkownika !", Duration = 5000 });
        editUser = await UserService.GetUserById(id);
        StateHasChanged();
    }

    private async Task ResestPassword()
    {
        await UserService.ResetPassword(resetPassword);
        NotificationService.Notify(new Radzen.NotificationMessage() { Style = "position: absolute; left: -1000px;", Severity = NotificationSeverity.Success, Summary = "Hasło zrestartowano !", Duration = 5000 });
        resetPassword = await UserService.GetUserByIdToResetPassword(id);
        StateHasChanged();
    }

    private async Task UpdateRoles()
    {
        await UserService.ChangeUserRole(editUser);
        NotificationService.Notify(new Radzen.NotificationMessage() { Style = "position: absolute; left: -1000px;", Severity = NotificationSeverity.Success, Summary = "Zaktualizowano użytkownika !", Duration = 5000 });
        editUser = await UserService.GetUserById(id);
        StateHasChanged();
    }
}
